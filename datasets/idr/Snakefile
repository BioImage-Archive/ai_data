# Import necessary modules
import omero
import os
from tqdm import tqdm
from idr import connection
import json 
import idr_funs 
from idr import connection

# screen_names = ["idr0093-mueller-perturbation/screenA"]

# screen_names = get_hcs()
# print(screen_names)
# breakpoint()

data_sizes = [1e5,1e6,5e5]

def get_hcs():
    # breakpoint()
    conn = connection("idr.openmicroscopy.org")
    screens = conn.getObjects('Screen')
    filtered_screens = []
    for screen in screens:
        # Get all the map annotation associated with the screen
        map_anns = [ann for ann in screen.listAnnotations()
                    if isinstance(ann, omero.gateway.MapAnnotationWrapper)]
        # Filter based on the map annotation values
        for ann in map_anns:
            values = dict(ann.getValue())
            if values.get('Organism') == 'Homo sapiens' and values.get('Study Type') == 'high content screen':
                filtered_screens.append(screen.name)
    conn.close()
    return filtered_screens

def expand_from_metadata(wildcards):
    # breakpoint()
    # checkpoint_output = checkpoints.get_hcs_screens.get(**wildcards).output.screen_names
    checkpoint_output = checkpoints.get_image_metadata.get(**wildcards).output.metadata
    with open(checkpoint_output) as f:
        metadata = json.load(f)
    input_files = []
    for image_id, zct in tqdm(metadata.items()):
        input_files.extend(
            expand(
                "results/{screen_name}/{image_id}/{z}_{c}_{t}.tiff",
                image_id=image_id,
                z=range(zct["z"]),
                c=range(zct["c"]),
                t=range(zct["t"]),
            )
        )
    return input_files

def expand_from_screens(wildcards):
    checkpoint_output  = checkpoints.get_hcs_screens.get(**wildcards).output.screen_names
    # breakpoint()
    with open(checkpoint_output) as f:
        screen_names = list(json.load(f))
    return expand("results/{screen_name}/image_ids.json",screen_name=screen_names)

def get_organism_screenids(session, organism, idr_base_url="https://idr.openmicroscopy.org"):  
    screen_id_list = []  
    qs = {"base": idr_base_url, "key": "organism", "value": organism}  
    screens_projects_url = "{base}/mapr/api/{key}/?value={value}"  
    url = screens_projects_url.format(**qs)  
    sr = session.get(url)  
    sr.raise_for_status()  
    for s in sr.json()["screens"]:  
        screen_id_list.append(str(s["id"]))  
    return screen_id_list

rule all:
    # conda:
    # "enviroment.yaml"
    input:
        # expand("results/{image_id}.tif", image_id=lambda wildcards: expand_wildcards_from_checkpoint(wildcards)),
        # directory('results/{image_id}/done.flag',image_id=lambda wildcards: expand_wildcards_from_checkpoint(wildcards)),
        # expand("{screen_name}/image_ids.txt",screen_name=screen_names),
        # "results/image_ids.json",
        # "results/metadata.json",
        # expand_from_metadata,
        # expand_from_screens,
        "results/screen_names.json",
        # expand("results/{data_size}.json",data_size=data_sizes),

checkpoint get_hcs_screens:
    # input:
    #     screen_names=expand_from_screens
    output:
        screen_names="results/screen_names.json",
    run:
        screen_names = get_hcs()
        # breakpoint()
        with open(output.screen_names, "w") as f:
            json.dump(screen_names, f)

# rule get_image_id_subsets:
#     input:
#         screen_json=expand_from_screens,
#         screen_names="results/screen_names.json"
#
#     output:
#         "results/{data_sizes}.json"
#     run:
#         breakpoint()
#         print(input.screens)
    
rule collate_image_ids:
    input:
        screen_names="results/screen_names.json",
        json=expand_from_screens
        # jsons=expand("{screen_name}/image_ids.json",screen_name=screen_names)
    output:
        "results/image_ids.json"
    shell:
        "jq -s . {input.jsons} > {output}" 

rule generate_image_ids:
    # conda:
    # "enviroment.yaml"
    output:
        image_ids=touch("results/{screen_name}/image_ids.json"),
    resources:
        mem_mb=16000,
    # shell:
    #     """
    #     touch {output.image_ids}
    #     """
    run:
        conn = connection("idr.openmicroscopy.org")
        # image_ids = get_image_ids_by_screen(conn, screen_name)

        # # Get the query service
        # query_service = conn.getQueryService()

        # # Use HQL to get the images in the screen
        # params = omero.sys.ParametersI()
        # params.addString('screen_name', screen_name)

        # query = (
        #     "SELECT img.id FROM Image img "
        #     "JOIN img.wellSamples ws "
        #     "JOIN ws.well w "
        #     "JOIN w.plate p "
        #     "JOIN p.screenLinks sl "
        #     "JOIN sl.parent s "
        #     "WHERE s.name = :screen_name"
        # )

        # image_ids = query_service.projection(query, params)
        # breakpoint()
        screen = conn.getObject('Screen', attributes={'name': wildcards.screen_name})
        # screens = conn.getObject('Screen', attributes={'name': wildcards.screen_name})
        print("Getting plates")
        plates = idr_funs.get_omero_children(screen)
        print("Getting wells")
        wells = idr_funs.get_children_from_list_of_objects(plates)
        print("Getting imageids")
        well_sampler = idr_funs.get_children_from_list_of_objects(wells)
        # breakpoint()
        # print("Getting plates")
        image_ids = [x.image().id for x in well_sampler]
        with open(output.image_ids, "w") as f:
            json.dump(image_ids, f)
        # with open(output.image_ids, "w") as f:
        #     f.write("\n".join(str(x) for x in image_ids))
        print("generate_image_ids: Done")
        conn._closeSession()


# # def expand_wildcards_from_checkpoint(wildcards):
# #     checkpoint_output = checkpoints.generate_image_ids.get(**wildcards).output.image_ids
# #     with open(checkpoint_output) as f:
# #         image_ids = [x.strip() for x in f.readlines()]
# #     print("Done")
# #     return image_ids


checkpoint get_image_metadata:
    # conda:
    # "enviroment.yaml"
    resources:
        mem_mb=32000,
    input:
        json="results/{screen_name}/image_ids.json",
        image_ids="results/{screen_name}/image_ids.json",
    output:
        metadata="results/{screen_name}/metadata.json",
    run:

        conn = connection("idr.openmicroscopy.org")
        with open(input.image_ids) as f:
            image_ids = [int(x.strip()) for x in f.readlines()]
        metadata = {}
        for image_id in tqdm(image_ids):
            image = conn.getObject("Image", image_id)
            z = image.getSizeZ()
            c = image.getSizeC()
            t = image.getSizeT()
            metadata[str(image_id)] = {"z": z, "c": c, "t": t}
        with open(output.metadata, "w") as f:
            json.dump(metadata, f)
        conn._closeSession()
        print("get_image_metadata: Done")


rule download_images:
    # conda:
    # "enviroment.yaml"
    resources:
        mem_mb=1000,
    input:
        metadata="results/{screen_name}/metadata.json",
    output:
        tiff="results/{screen_name}/{image_id}/{z}_{c}_{t}.tiff",
    # params:
    # z = lambda wildcards: get_zct(wildcards).get("z"),
    # c = lambda wildcards: get_zct(wildcards).get("c"),
    # t = lambda wildcards: get_zct(wildcards).get("t")
    run:
        from idr_funs import download_image
        from idr import connection

        conn = connection("idr.openmicroscopy.org")
        download_image(
            conn,
            wildcards.image_id,
            output.tiff,
            int(wildcards.z),
            int(wildcards.c),
            int(wildcards.t),
        )
        conn._closeSession()



# def expand_from_metadata(wildcards):
#     checkpoint_output = checkpoints.get_image_metadata.get(**wildcards).output.metadata
#     with open(checkpoint_output) as f:
#         metadata = json.load(f)
#     input_files = []
#     for image_id, zct in tqdm(metadata.items()):
#         z_values = range(zct["z"])
#         c_values = range(zct["c"])
#         t_values = range(zct["t"])
#         input_files.extend(
#             expand(
#                 "results/{image_id}/{z}_{c}_{t}.tiff",
#                 image_id=image_id,
#                 z=z_values,
#                 c=c_values,
#                 t=t_values,
#             )
#         )
#     return input_files[0:10]














# rule download_plane:
#     input:
#         directory('results/{image_id}/')
#     output:
#         touch('results/{image_id}/done.flag'),
#         touch("results/{image_id}/{z}_{c}_{t}.tif")
#     # conda:
#         # "enviroment.yaml"
#     run:
#         from idr import connection
#         conn = connection('idr.openmicroscopy.org')
#         z = image.getSizeZ()
#         c = image.getSizeC()
#         t = image.getSizeT()

#         download_image(conn, image_id, output[1], z, c, t)
#         for z in range(z):
#             for c in range(c):
#                 for t in range(t):
#                     pixels = image.getPrimaryPixels()
#                     plane = pixels.getPlane(z, c, t)
#                     with open(output[1], "wb") as f:
#                         f.write(plane)


# zct_list = []
# for z in range(size_z, size_z):     # get the top half of the Z-stack
#     for c in range(size_c):          # all channels
#         for t in range(size_t):      # all time-points
#             zct_list.append((z, c, t))

# planes = pixels.getPlanes(zct_list)
# for i, p in enumerate(planes):
#     print("plane zct:", zct_list[i], " min:", p.min(), " max:", p.max())


# # Define a rule to download all images
# rule download_all_images:
#     input:
#         os.path.join(input_dir, 'image_ids.txt')
#     output:
#         os.path.join(output_dir, 'done.txt')
#     run:
#         input_file = str(input[0])
#         output_file = str(output[0])
#         download_images(input_file, output_dir)
#         # Create an empty file to indicate that the download is complete
#         open(output_file, 'w').close()

# # Define a rule to generate the list of image IDs
# rule generate_image_ids:
#     output:
#         os.path.join(input_dir, 'image_ids.txt')
#     run:
#         output_file = str(output[0])
#         # Get a list of all image IDs in the experiment
#         image_ids = images.list_images(conn, experiment_id)
#         # Write the list of image IDs to the output file
#         with open(output_file, 'w') as f:
#             f.write('\n'.join(image_ids))

# # Define a rule to collect all downloaded images using a wildcard glob
# rule collect_images:
#     output:
#         os.path.join(output_dir, '*.tif')
#     shell:
#         """
#         mkdir -p {output_dir}
#         mv {output_dir}/*.TIF {output_dir}/*.tif
#         """
# # Define an all rule to run all rules
# rule all:
#     input:
#         os.path.join(output_dir, 'done.txt')
#     output:
#         os.path.join(output_dir, '*.tif')
#     run:
#         pass

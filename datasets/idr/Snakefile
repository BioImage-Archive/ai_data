# Import necessary modules
import omero
import os
from tqdm import tqdm
from idr import connection
import json 
import idr_funs 
from idr import connection

# screen_names = ["idr0093-mueller-perturbation/screenA"]

# print(screen_names)
# breakpoint()

data_sizes = list(map(int,[1e5,1e6,5e5]))
def get_hcs():
    # breakpoint()
    conn = connection("idr.openmicroscopy.org")
    screens = conn.getObjects('Screen')
    filtered_screens = []
    for screen in screens:
        # Get all the map annotation associated with the screen
        map_anns = [ann for ann in screen.listAnnotations()
                    if isinstance(ann, omero.gateway.MapAnnotationWrapper)]
        # Filter based on the map annotation values
        for ann in map_anns:
            values = dict(ann.getValue())
            if values.get('Organism') == 'Homo sapiens' and values.get('Study Type') == 'high content screen':
                filtered_screens.append(screen.name)
    conn.close()
    return filtered_screens

screen_names = get_hcs()

def expand_from_metadata(wildcards):
    # breakpoint()
    # checkpoint_output = checkpoints.get_hcs_screens.get(**wildcards).output.screen_names
    checkpoint_output = checkpoints.get_image_metadata.get(**wildcards).output.metadata
    with open(checkpoint_output) as f:
        metadata = json.load(f)
    input_files = []
    for image_id, zct in tqdm(metadata.items()):
        input_files.extend(
            expand(
                "results/{{screen_name}}/{image_id}/{z}_{c}_{t}.tiff",
                image_id=image_id,
                z=range(zct["z"]),
                c=range(zct["c"]),
                t=range(zct["t"]),
            )
        )
    return input_files

def expand_from_screens(wildcards):
    # breakpoint()
    checkpoint_output = (checkpoints.get_hcs_screens.get(**wildcards).output.screen_names)
    # breakpoint()
    
    with open(checkpoint_output) as f:
        screen_names = list(json.load(f))
    # breakpoint()
    return expand("results/{screen_name}/image_ids.json",screen_name=screen_names)

def get_organism_screenids(session, organism, idr_base_url="https://idr.openmicroscopy.org"):  
    screen_id_list = []  
    qs = {"base": idr_base_url, "key": "organism", "value": organism}  
    screens_projects_url = "{base}/mapr/api/{key}/?value={value}"  
    url = screens_projects_url.format(**qs)  
    sr = session.get(url)  
    sr.raise_for_status()  
    for s in sr.json()["screens"]:  
        screen_id_list.append(str(s["id"]))  
    return screen_id_list


rule all:
    # conda:
    # "enviroment.yaml"
    # image_ids = get_image_ids()
    input:
        # expand_from_metadata,
        # expand("results/{image_id}.tif", image_id=lambda wildcards: expand_wildcards_from_checkpoint(wildcards)),
        # expand_from_metadata,
        # expand("results/{image_id}.tif", image_id=image_ids)
        # expand("{screen_name}/image_ids.txt",screen_name=screen_names),
        "results/screen_names.json",
        "results/image_ids.json",
        expand("results/{screen_name}/downloaded.flag",screen_name=screen_names)

checkpoint get_hcs_screens:
    input:
        screen_names=expand_from_screens
    output:
        screen_names="results/screen_names.json",
    run:
        screen_names = get_hcs()
        # breakpoint()
        with open(output.screen_names, "w") as f:
            json.dump(screen_names, f)

rule download_all_images:
  input:
    metadata=expand_from_metadata
  output:
    flag=touch("results/{screen_name}/downloaded.flag")

    
rule collate_image_ids:
    input:
        screen_names="results/screen_names.json",
        json=expand_from_screens
        # jsons=expand("{screen_name}/image_ids.json",screen_name=screen_names)
    output:
        json="results/image_ids.json"
    shell:
        "jq -s . {input.json} > {output.json}" 

rule reduce_image_set:
    input:
        image_ids="results/image_ids.json",
    output:
        subset="results/{data_size}_image_ids.json"
    shell:
        "jq -n --argjson size {wildcards.data_size} '[inputs] | flatten | .[range(0; $size | tonumber)]' {input.image_ids} > {output.subset}"

rule generate_image_ids:
    # conda:
    # "enviroment.yaml"
    output:
        image_ids=touch("results/{screen_name}/image_ids.json"),
    resources:
        mem_mb=16000,
    # shell:
    #     """
    #     touch {output.image_ids}
    #     """
    run:
        conn = connection("idr.openmicroscopy.org")
        # image_ids = get_image_ids
        screen = conn.getObject('Screen', attributes={'name': wildcards.screen_name})
        # screens = conn.getObject('Screen', attributes={'name': wildcards.screen_name})
        print("Getting plates")
        plates = idr_funs.get_omero_children(screen)
        print("Getting wells")
        wells = idr_funs.get_children_from_list_of_objects(plates)
        print("Getting imageids")
        well_sampler = idr_funs.get_children_from_list_of_objects(wells)
        # breakpoint()
        # print("Getting plates")
        image_ids = [x.image().id for x in well_sampler]
        with open(output.image_ids, "w") as f:
            json.dump(image_ids, f)
        # with open(output.image_ids, "w") as f:
        #     f.write("\n".join(str(x) for x in image_ids))
        print("generate_image_ids: Done")
        conn._closeSession()


def expand_wildcards_from_checkpoint(wildcards):
    checkpoint_output = checkpoints.generate_image_ids.get(**wildcards).output.image_ids
    with open(checkpoint_output) as f:
        image_ids = [x.strip() for x in f.readlines()]
    print("Done")
    return image_ids


checkpoint get_image_metadata:
    # conda:
    # "enviroment.yaml"
    resources:
        mem_mb=32000,
    input:
        json="results/{screen_name}/image_ids.json",
        image_ids="results/{screen_name}/image_ids.json",
    output:
        metadata="results/{screen_name}/metadata.json",
    run:

        conn = connection("idr.openmicroscopy.org")
        with open(input.image_ids, 'r') as f:
            image_ids = json.load(f)
        breakpoint()
        # with open(input.image_ids) as f:
            # breakpoint()
            # image_ids = [int(x.strip()) for x in f.readlines()]
        metadata = {}
        for image_id in tqdm(image_ids):
            image = conn.getObject("Image", image_id)
            z = image.getSizeZ()
            c = image.getSizeC()
            t = image.getSizeT()
            metadata[str(image_id)] = {"z": z, "c": c, "t": t}
        
        with open(output.metadata, "w") as f:
            json.dump(metadata, f)
        conn._closeSession()
        print("get_image_metadata: Done")


rule download_images:
    # conda:
    # "enviroment.yaml"
    resources:
        mem_mb=1000,
    input:
        metadata="results/{screen_name}/metadata.json",
    output:
        tiff="results/{screen_name}/{image_id}/{z}_{c}_{t}.tiff",
    run:
        from idr_funs import download_image
        from idr import connection

        conn = connection("idr.openmicroscopy.org")
        download_image(
            conn,
            wildcards.image_id,
            output.tiff,
            int(wildcards.z),
            int(wildcards.c),
            int(wildcards.t),
        )
        conn._closeSession()


rule convert_tiff_to_ngff:
  input:
    tiff="results/{screen_name}/{image_id}/{z}_{c}_{t}.tiff",
  output:
    ngff=directory("results/{screen_name}/{image_id}/{z}_{c}_{t}.ome.ngff"),
  shell:
    """
    bioformats2raw {input.tiff} {output.ngff}
    """

# def expand_from_metadata(wildcards):
#     checkpoint_output = checkpoints.get_image_metadata.get(**wildcards).output.metadata
#     with open(checkpoint_output) as f:
#         metadata = json.load(f)
#     input_files = []
#     for image_id, zct in tqdm(metadata.items()):
#         z_values = range(zct["z"])
#         c_values = range(zct["c"])
#         t_values = range(zct["t"])
#         input_files.extend(
#             expand(
#                 "results/{image_id}/{z}_{c}_{t}.tiff",
#                 image_id=image_id,
#                 z=z_values,
#                 c=c_values,
#                 t=t_values,
#             )
#         )
#     return input_files[0:10]











